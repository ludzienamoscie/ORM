package mappers;

import com.datastax.oss.driver.internal.core.util.concurrent.LazyReference;
import com.datastax.oss.driver.internal.mapper.DaoCacheKey;
import com.datastax.oss.driver.internal.mapper.DefaultMapperContext;
import dao.RoomDao;
import dao.RoomDaoImpl__MapperGenerated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * Do not instantiate this class directly, use {@link RoomMapperBuilder} instead.
 *
 * <p>Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class RoomMapperImpl__MapperGenerated implements RoomMapper {
  private final DefaultMapperContext context;

  private final LazyReference<RoomDao> roomDaoCache1;

  private final ConcurrentMap<DaoCacheKey, RoomDao> roomDaoCache = new ConcurrentHashMap<>();

  public RoomMapperImpl__MapperGenerated(DefaultMapperContext context) {
    this.context = context;
    this.roomDaoCache1 = new LazyReference<>(() -> RoomDaoImpl__MapperGenerated.init(context));
  }

  @Override
  public RoomDao roomDao(String keyspace, String table) {
    DaoCacheKey key = new DaoCacheKey(keyspace, table, null, null);
    return roomDaoCache.computeIfAbsent(key, k -> RoomDaoImpl__MapperGenerated.init(context.withDaoParameters(k.getKeyspaceId(), k.getTableId(), k.getExecutionProfileName(), k.getExecutionProfile())));
  }

  @Override
  public RoomDao roomDao() {
    return roomDaoCache1.get();
  }
}
