package dao;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.ResultSet;
import com.datastax.oss.driver.api.core.cql.Row;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import model.Show;
import model.ShowHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class ShowDaoImpl__MapperGenerated extends DaoBase implements ShowDao {
  private static final Logger LOG = LoggerFactory.getLogger(ShowDaoImpl__MapperGenerated.class);

  private final ShowHelper__MapperGenerated showHelper;

  private final PreparedStatement createShowStatement;

  private final PreparedStatement updateShowStatement;

  private final PreparedStatement deleteShowStatement;

  private ShowDaoImpl__MapperGenerated(MapperContext context,
      ShowHelper__MapperGenerated showHelper, PreparedStatement createShowStatement,
      PreparedStatement updateShowStatement, PreparedStatement deleteShowStatement) {
    super(context);
    this.showHelper = showHelper;
    this.createShowStatement = createShowStatement;
    this.updateShowStatement = updateShowStatement;
    this.deleteShowStatement = deleteShowStatement;
  }

  @Override
  public void createShow(Show show) {
    BoundStatementBuilder boundStatementBuilder = createShowStatement.boundStatementBuilder();
    showHelper.set(show, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public Show readShow(ResultSet resultSet) {
    Row row = resultSet.one();
    return (row == null) ? null : showHelper.get(row, false);
  }

  @Override
  public void updateShow(Show show) {
    BoundStatementBuilder boundStatementBuilder = updateShowStatement.boundStatementBuilder();
    showHelper.set(show, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void deleteShow(Show show) {
    BoundStatementBuilder boundStatementBuilder = deleteShowStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("show_id", show.getShow_id(), String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<ShowDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      ShowHelper__MapperGenerated showHelper = new ShowHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        showHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `createShow(model.Show)`:
      SimpleStatement createShowStatement_simple = showHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method createShow(model.Show)",
          context.getSession().getName(),
          createShowStatement_simple.getQuery());
      CompletionStage<PreparedStatement> createShowStatement = prepare(createShowStatement_simple, context);
      prepareStages.add(createShowStatement);
      // Prepare the statement for `updateShow(model.Show)`:
      SimpleStatement updateShowStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)showHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method updateShow(model.Show)",
          context.getSession().getName(),
          updateShowStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateShowStatement = prepare(updateShowStatement_simple, context);
      prepareStages.add(updateShowStatement);
      // Prepare the statement for `deleteShow(model.Show)`:
      SimpleStatement deleteShowStatement_simple = showHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteShow(model.Show)",
          context.getSession().getName(),
          deleteShowStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteShowStatement = prepare(deleteShowStatement_simple, context);
      prepareStages.add(deleteShowStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (ShowDao) new ShowDaoImpl__MapperGenerated(context,
              showHelper,
              CompletableFutures.getCompleted(createShowStatement),
              CompletableFutures.getCompleted(updateShowStatement),
              CompletableFutures.getCompleted(deleteShowStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static ShowDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
