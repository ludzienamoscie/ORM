package dao;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.ResultSet;
import com.datastax.oss.driver.api.core.cql.Row;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import model.Client;
import model.ClientHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class ClientDaoImpl__MapperGenerated extends DaoBase implements ClientDao {
  private static final Logger LOG = LoggerFactory.getLogger(ClientDaoImpl__MapperGenerated.class);

  private final ClientHelper__MapperGenerated clientHelper;

  private final PreparedStatement createClientStatement;

  private final PreparedStatement updateClientStatement;

  private final PreparedStatement deleteClientStatement;

  private ClientDaoImpl__MapperGenerated(MapperContext context,
      ClientHelper__MapperGenerated clientHelper, PreparedStatement createClientStatement,
      PreparedStatement updateClientStatement, PreparedStatement deleteClientStatement) {
    super(context);
    this.clientHelper = clientHelper;
    this.createClientStatement = createClientStatement;
    this.updateClientStatement = updateClientStatement;
    this.deleteClientStatement = deleteClientStatement;
  }

  @Override
  public void createClient(Client client) {
    BoundStatementBuilder boundStatementBuilder = createClientStatement.boundStatementBuilder();
    clientHelper.set(client, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public Client readClient(ResultSet resultSet) {
    Row row = resultSet.one();
    return (row == null) ? null : clientHelper.get(row, false);
  }

  @Override
  public void updateClient(Client client) {
    BoundStatementBuilder boundStatementBuilder = updateClientStatement.boundStatementBuilder();
    clientHelper.set(client, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void deleteClient(Client client) {
    BoundStatementBuilder boundStatementBuilder = deleteClientStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("client_id", client.getClient_id(), String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<ClientDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      ClientHelper__MapperGenerated clientHelper = new ClientHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        clientHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `createClient(model.Client)`:
      SimpleStatement createClientStatement_simple = clientHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method createClient(model.Client)",
          context.getSession().getName(),
          createClientStatement_simple.getQuery());
      CompletionStage<PreparedStatement> createClientStatement = prepare(createClientStatement_simple, context);
      prepareStages.add(createClientStatement);
      // Prepare the statement for `updateClient(model.Client)`:
      SimpleStatement updateClientStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)clientHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method updateClient(model.Client)",
          context.getSession().getName(),
          updateClientStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateClientStatement = prepare(updateClientStatement_simple, context);
      prepareStages.add(updateClientStatement);
      // Prepare the statement for `deleteClient(model.Client)`:
      SimpleStatement deleteClientStatement_simple = clientHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteClient(model.Client)",
          context.getSession().getName(),
          deleteClientStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteClientStatement = prepare(deleteClientStatement_simple, context);
      prepareStages.add(deleteClientStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (ClientDao) new ClientDaoImpl__MapperGenerated(context,
              clientHelper,
              CompletableFutures.getCompleted(createClientStatement),
              CompletableFutures.getCompleted(updateClientStatement),
              CompletableFutures.getCompleted(deleteClientStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static ClientDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
